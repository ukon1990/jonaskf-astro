---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/global.css';
import type { ImageMetadata } from 'astro';
import FallbackImage from '../assets/blog-placeholder-1.jpg';
import { SITE_TITLE } from '../consts';

interface Props {
	title: string;
	description: string;
	image?: ImageMetadata;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = FallbackImage } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="sitemap" href="/sitemap-index.xml" />
<link
	rel="alternate"
	type="application/rss+xml"
	title={SITE_TITLE}
	href={new URL('rss.xml', Astro.site)}
/>
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href="/fonts/atkinson-regular.woff" as="font" type="font/woff" crossorigin />
<link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image.src, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image.src, Astro.url)} />

<script is:inline>
	(() => {
		const root = document.documentElement;
		let activeTheme = '';
		let overrideTheme = '';
		let lastTimeTheme = '';
		let toggleInitialized = false;
		const pickTimeTheme = () => {
			const hour = new Date().getHours();
			return hour >= 7 && hour < 20 ? 'light' : 'dark';
		};
		const updateToggle = () => {
			const toggle = document.querySelector('[data-theme-toggle]');
			if (!toggle) {
				return;
			}
			const targetLabel = activeTheme === 'light' ? 'Switch to dark theme' : 'Switch to light theme';
			toggle.setAttribute('aria-label', targetLabel);
			toggle.setAttribute('aria-pressed', overrideTheme ? 'true' : 'false');
		};
		const applyTheme = () => {
			const timeTheme = pickTimeTheme();
			if (timeTheme !== lastTimeTheme) {
				lastTimeTheme = timeTheme;
				overrideTheme = '';
			}
			const nextTheme = overrideTheme || timeTheme;
			if (nextTheme !== activeTheme) {
				activeTheme = nextTheme;
				root.dataset.theme = nextTheme;
			}
			updateToggle();
		};
		const toggleOverride = () => {
			if (overrideTheme) {
				overrideTheme = '';
			} else {
				overrideTheme = activeTheme === 'light' ? 'dark' : 'light';
				if (overrideTheme === pickTimeTheme()) {
					overrideTheme = '';
				}
			}
			applyTheme();
		};
		const scheduleNextCheck = () => {
			const now = new Date();
			const msUntilNextMinute =
				60000 - now.getSeconds() * 1000 - now.getMilliseconds();
			window.setTimeout(() => {
				applyTheme();
				scheduleNextCheck();
			}, Math.max(msUntilNextMinute, 1000));
		};
		const setupToggle = () => {
			if (toggleInitialized) {
				updateToggle();
				return;
			}
			const toggle = document.querySelector('[data-theme-toggle]');
			if (!toggle) {
				return;
			}
			toggleInitialized = true;
			toggle.addEventListener('click', (event) => {
				event.preventDefault();
				toggleOverride();
			});
			updateToggle();
		};
		const boot = () => {
			applyTheme();
			scheduleNextCheck();
			setupToggle();
		};
		if (document.readyState === 'loading') {
			document.addEventListener('DOMContentLoaded', () => {
				setupToggle();
			});
		}
		boot();
		document.addEventListener('visibilitychange', () => {
			if (!document.hidden) {
				applyTheme();
			}
		});
		window.addEventListener('focus', applyTheme);
	})();
</script>
